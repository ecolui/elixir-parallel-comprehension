
import Parallel
test = Parallel.para(for x <- 1..4, do: x * 2)
test = Parallel.para(for x <- 1..4, y <- 1..10, x <= y, do: x * 2)
test = Parallel.para(for x <- 1..4, do: self())
test = quote do: Parallel.para(for x <- 1..4, do: x * 2)

#print the corresponding elixir code that is generated by the macro
test |> Macro.expand_once(__ENV__) |> Macro.to_string |> IO.puts

test = Parallel.para(for {key, val} <- %{"a" => 1, "b" => 2}, into: %{}, do: {key, val * val})
test = quote do: Parallel.para(for {key, val} <- %{"a" => 1, "b" => 2}, into: %{}, do: {key, val * val})
test |> Macro.expand_once(__ENV__) |> Macro.to_string |> IO.puts
